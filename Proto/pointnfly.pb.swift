// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: arsdk/pointnfly.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Arsdk_Pointnfly_ExecutionStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Directive execution did complete successfully (fly only).
  case success // = 0

  /// Directive failed to execute or to complete successfully.
  case failed // = 1

  /// Directive execution was interrupted, either by user (Deactivate, Execute request) or by the drone.
  case interrupted // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .success
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .success
    case 1: self = .failed
    case 2: self = .interrupted
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .success: return 0
    case .failed: return 1
    case .interrupted: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Arsdk_Pointnfly_ExecutionStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Arsdk_Pointnfly_ExecutionStatus] = [
    .success,
    .failed,
    .interrupted,
  ]
}

#endif  // swift(>=4.2)

enum Arsdk_Pointnfly_GimbalControlMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case locked // = 0
  case lockedOnce // = 1
  case free // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .locked
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .locked
    case 1: self = .lockedOnce
    case 2: self = .free
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .locked: return 0
    case .lockedOnce: return 1
    case .free: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Arsdk_Pointnfly_GimbalControlMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Arsdk_Pointnfly_GimbalControlMode] = [
    .locked,
    .lockedOnce,
    .free,
  ]
}

#endif  // swift(>=4.2)

enum Arsdk_Pointnfly_UnavailabilityReason: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case droneGpsInfoInaccurate // = 0
  case droneNotCalibrated // = 1
  case droneOutGeofence // = 2
  case droneTooCloseToGround // = 3
  case droneAboveMaxAltitude // = 4
  case droneInsufficientBattery // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .droneGpsInfoInaccurate
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .droneGpsInfoInaccurate
    case 1: self = .droneNotCalibrated
    case 2: self = .droneOutGeofence
    case 3: self = .droneTooCloseToGround
    case 4: self = .droneAboveMaxAltitude
    case 5: self = .droneInsufficientBattery
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .droneGpsInfoInaccurate: return 0
    case .droneNotCalibrated: return 1
    case .droneOutGeofence: return 2
    case .droneTooCloseToGround: return 3
    case .droneAboveMaxAltitude: return 4
    case .droneInsufficientBattery: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Arsdk_Pointnfly_UnavailabilityReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Arsdk_Pointnfly_UnavailabilityReason] = [
    .droneGpsInfoInaccurate,
    .droneNotCalibrated,
    .droneOutGeofence,
    .droneTooCloseToGround,
    .droneAboveMaxAltitude,
    .droneInsufficientBattery,
  ]
}

#endif  // swift(>=4.2)

/// This is the entry point to send messages to the drone.
struct Arsdk_Pointnfly_Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Arsdk_Pointnfly_Command.OneOf_ID? = nil

  var getState: Arsdk_Pointnfly_Command.GetState {
    get {
      if case .getState(let v)? = id {return v}
      return Arsdk_Pointnfly_Command.GetState()
    }
    set {id = .getState(newValue)}
  }

  var deactivate: Arsdk_Pointnfly_Command.Deactivate {
    get {
      if case .deactivate(let v)? = id {return v}
      return Arsdk_Pointnfly_Command.Deactivate()
    }
    set {id = .deactivate(newValue)}
  }

  var execute: Arsdk_Pointnfly_Command.Execute {
    get {
      if case .execute(let v)? = id {return v}
      return Arsdk_Pointnfly_Command.Execute()
    }
    set {id = .execute(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    case getState(Arsdk_Pointnfly_Command.GetState)
    case deactivate(Arsdk_Pointnfly_Command.Deactivate)
    case execute(Arsdk_Pointnfly_Command.Execute)

  #if !swift(>=4.1)
    static func ==(lhs: Arsdk_Pointnfly_Command.OneOf_ID, rhs: Arsdk_Pointnfly_Command.OneOf_ID) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.getState, .getState): return {
        guard case .getState(let l) = lhs, case .getState(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.deactivate, .deactivate): return {
        guard case .deactivate(let l) = lhs, case .deactivate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.execute, .execute): return {
        guard case .execute(let l) = lhs, case .execute(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Gets current state.
  struct GetState {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var includeDefaultCapabilities: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  /// Aborts any current action: point or fly.
  struct Deactivate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  /// Executes the given directive: point or fly.
  struct Execute {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var directive: Arsdk_Pointnfly_Command.Execute.OneOf_Directive? = nil

    var point: Arsdk_Pointnfly_Point {
      get {
        if case .point(let v)? = directive {return v}
        return Arsdk_Pointnfly_Point()
      }
      set {directive = .point(newValue)}
    }

    var fly: Arsdk_Pointnfly_Fly {
      get {
        if case .fly(let v)? = directive {return v}
        return Arsdk_Pointnfly_Fly()
      }
      set {directive = .fly(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Directive: Equatable {
      case point(Arsdk_Pointnfly_Point)
      case fly(Arsdk_Pointnfly_Fly)

    #if !swift(>=4.1)
      static func ==(lhs: Arsdk_Pointnfly_Command.Execute.OneOf_Directive, rhs: Arsdk_Pointnfly_Command.Execute.OneOf_Directive) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.point, .point): return {
          guard case .point(let l) = lhs, case .point(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fly, .fly): return {
          guard case .fly(let l) = lhs, case .fly(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    init() {}
  }

  init() {}
}

/// A directive requesting the drone to point at a given location.
/// The drone will constantly point at the target as it moves, until the Point directive is deactivated or a Fly
/// directive is executed.
struct Arsdk_Pointnfly_Point {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gimbalControlMode: Arsdk_Pointnfly_GimbalControlMode = .locked

  /// Target point location.
  var latitude: Double = 0

  /// in degrees
  var longitude: Double = 0

  /// in meters
  var altitude: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A directive requesting the drone to move to a given location.
struct Arsdk_Pointnfly_Fly {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gimbalControlMode: Arsdk_Pointnfly_GimbalControlMode = .locked

  /// Target point location.
  var latitude: Double = 0

  /// in degrees
  var longitude: Double = 0

  /// in meters
  var altitude: Double = 0

  /// Drone heading.
  var heading: Arsdk_Pointnfly_Fly.OneOf_Heading? = nil

  /// The drone keeps its current heading.
  var current: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .current(let v)? = heading {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {heading = .current(newValue)}
  }

  /// The drone rotates towards target before moving to said target.
  var toTargetBefore: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .toTargetBefore(let v)? = heading {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {heading = .toTargetBefore(newValue)}
  }

  /// The drone rotates to given heading before moving to target.
  /// The value specifies the heading relative to the North in degrees (clockwise).
  var customBefore: Double {
    get {
      if case .customBefore(let v)? = heading {return v}
      return 0
    }
    set {heading = .customBefore(newValue)}
  }

  /// The drone rotates to given heading while moving to target.
  /// The value specifies the heading relative to the North in degrees (clockwise).
  var customDuring: Double {
    get {
      if case .customDuring(let v)? = heading {return v}
      return 0
    }
    set {heading = .customDuring(newValue)}
  }

  /// Requested (max) speed for move.
  var maxHorizontalSpeed: Double = 0

  /// in meters per second
  var maxVerticalSpeed: Double = 0

  /// in degrees per second
  var maxYawRotationSpeed: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Drone heading.
  enum OneOf_Heading: Equatable {
    /// The drone keeps its current heading.
    case current(SwiftProtobuf.Google_Protobuf_Empty)
    /// The drone rotates towards target before moving to said target.
    case toTargetBefore(SwiftProtobuf.Google_Protobuf_Empty)
    /// The drone rotates to given heading before moving to target.
    /// The value specifies the heading relative to the North in degrees (clockwise).
    case customBefore(Double)
    /// The drone rotates to given heading while moving to target.
    /// The value specifies the heading relative to the North in degrees (clockwise).
    case customDuring(Double)

  #if !swift(>=4.1)
    static func ==(lhs: Arsdk_Pointnfly_Fly.OneOf_Heading, rhs: Arsdk_Pointnfly_Fly.OneOf_Heading) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.current, .current): return {
        guard case .current(let l) = lhs, case .current(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.toTargetBefore, .toTargetBefore): return {
        guard case .toTargetBefore(let l) = lhs, case .toTargetBefore(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.customBefore, .customBefore): return {
        guard case .customBefore(let l) = lhs, case .customBefore(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.customDuring, .customDuring): return {
        guard case .customDuring(let l) = lhs, case .customDuring(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// This is the entry point to receive messages from the drone.
struct Arsdk_Pointnfly_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Arsdk_Pointnfly_Event.OneOf_ID? = nil

  var state: Arsdk_Pointnfly_Event.State {
    get {
      if case .state(let v)? = id {return v}
      return Arsdk_Pointnfly_Event.State()
    }
    set {id = .state(newValue)}
  }

  var execution: Arsdk_Pointnfly_ExecutionStatus {
    get {
      if case .execution(let v)? = id {return v}
      return .success
    }
    set {id = .execution(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    case state(Arsdk_Pointnfly_Event.State)
    case execution(Arsdk_Pointnfly_ExecutionStatus)

  #if !swift(>=4.1)
    static func ==(lhs: Arsdk_Pointnfly_Event.OneOf_ID, rhs: Arsdk_Pointnfly_Event.OneOf_ID) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.state, .state): return {
        guard case .state(let l) = lhs, case .state(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.execution, .execution): return {
        guard case .execution(let l) = lhs, case .execution(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  struct State {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var state: Arsdk_Pointnfly_Event.State.OneOf_State? = nil

    var unavailable: Arsdk_Pointnfly_State.Unavailable {
      get {
        if case .unavailable(let v)? = state {return v}
        return Arsdk_Pointnfly_State.Unavailable()
      }
      set {state = .unavailable(newValue)}
    }

    var idle: Arsdk_Pointnfly_State.Idle {
      get {
        if case .idle(let v)? = state {return v}
        return Arsdk_Pointnfly_State.Idle()
      }
      set {state = .idle(newValue)}
    }

    var active: Arsdk_Pointnfly_State.Active {
      get {
        if case .active(let v)? = state {return v}
        return Arsdk_Pointnfly_State.Active()
      }
      set {state = .active(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_State: Equatable {
      case unavailable(Arsdk_Pointnfly_State.Unavailable)
      case idle(Arsdk_Pointnfly_State.Idle)
      case active(Arsdk_Pointnfly_State.Active)

    #if !swift(>=4.1)
      static func ==(lhs: Arsdk_Pointnfly_Event.State.OneOf_State, rhs: Arsdk_Pointnfly_Event.State.OneOf_State) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.unavailable, .unavailable): return {
          guard case .unavailable(let l) = lhs, case .unavailable(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.idle, .idle): return {
          guard case .idle(let l) = lhs, case .idle(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.active, .active): return {
          guard case .active(let l) = lhs, case .active(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    init() {}
  }

  /// Event relative to the execution of a point or fly directive.
  struct Execution {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: Arsdk_Pointnfly_ExecutionStatus = .success

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

/// Point'n'fly piloting state.
struct Arsdk_Pointnfly_State {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Point'n'fly piloting is unavailable for the listed reasons.
  struct Unavailable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var reasons: [Arsdk_Pointnfly_UnavailabilityReason] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  /// Point'n'fly piloting is available but not active yet.
  struct Idle {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  /// Point'n'fly is active: either a point or a fly is executing.
  struct Active {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var currentDirective: Arsdk_Pointnfly_State.Active.OneOf_CurrentDirective? = nil

    var point: Arsdk_Pointnfly_Point {
      get {
        if case .point(let v)? = currentDirective {return v}
        return Arsdk_Pointnfly_Point()
      }
      set {currentDirective = .point(newValue)}
    }

    var fly: Arsdk_Pointnfly_Fly {
      get {
        if case .fly(let v)? = currentDirective {return v}
        return Arsdk_Pointnfly_Fly()
      }
      set {currentDirective = .fly(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_CurrentDirective: Equatable {
      case point(Arsdk_Pointnfly_Point)
      case fly(Arsdk_Pointnfly_Fly)

    #if !swift(>=4.1)
      static func ==(lhs: Arsdk_Pointnfly_State.Active.OneOf_CurrentDirective, rhs: Arsdk_Pointnfly_State.Active.OneOf_CurrentDirective) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.point, .point): return {
          guard case .point(let l) = lhs, case .point(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fly, .fly): return {
          guard case .fly(let l) = lhs, case .fly(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    init() {}
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Arsdk_Pointnfly_ExecutionStatus: @unchecked Sendable {}
extension Arsdk_Pointnfly_GimbalControlMode: @unchecked Sendable {}
extension Arsdk_Pointnfly_UnavailabilityReason: @unchecked Sendable {}
extension Arsdk_Pointnfly_Command: @unchecked Sendable {}
extension Arsdk_Pointnfly_Command.OneOf_ID: @unchecked Sendable {}
extension Arsdk_Pointnfly_Command.GetState: @unchecked Sendable {}
extension Arsdk_Pointnfly_Command.Deactivate: @unchecked Sendable {}
extension Arsdk_Pointnfly_Command.Execute: @unchecked Sendable {}
extension Arsdk_Pointnfly_Command.Execute.OneOf_Directive: @unchecked Sendable {}
extension Arsdk_Pointnfly_Point: @unchecked Sendable {}
extension Arsdk_Pointnfly_Fly: @unchecked Sendable {}
extension Arsdk_Pointnfly_Fly.OneOf_Heading: @unchecked Sendable {}
extension Arsdk_Pointnfly_Event: @unchecked Sendable {}
extension Arsdk_Pointnfly_Event.OneOf_ID: @unchecked Sendable {}
extension Arsdk_Pointnfly_Event.State: @unchecked Sendable {}
extension Arsdk_Pointnfly_Event.State.OneOf_State: @unchecked Sendable {}
extension Arsdk_Pointnfly_Event.Execution: @unchecked Sendable {}
extension Arsdk_Pointnfly_State: @unchecked Sendable {}
extension Arsdk_Pointnfly_State.Unavailable: @unchecked Sendable {}
extension Arsdk_Pointnfly_State.Idle: @unchecked Sendable {}
extension Arsdk_Pointnfly_State.Active: @unchecked Sendable {}
extension Arsdk_Pointnfly_State.Active.OneOf_CurrentDirective: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "arsdk.pointnfly"

extension Arsdk_Pointnfly_ExecutionStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EXECUTION_STATUS_SUCCESS"),
    1: .same(proto: "EXECUTION_STATUS_FAILED"),
    2: .same(proto: "EXECUTION_STATUS_INTERRUPTED"),
  ]
}

extension Arsdk_Pointnfly_GimbalControlMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GIMBAL_CONTROL_MODE_LOCKED"),
    1: .same(proto: "GIMBAL_CONTROL_MODE_LOCKED_ONCE"),
    2: .same(proto: "GIMBAL_CONTROL_MODE_FREE"),
  ]
}

extension Arsdk_Pointnfly_UnavailabilityReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNAVAILABILITY_REASON_DRONE_GPS_INFO_INACCURATE"),
    1: .same(proto: "UNAVAILABILITY_REASON_DRONE_NOT_CALIBRATED"),
    2: .same(proto: "UNAVAILABILITY_REASON_DRONE_OUT_GEOFENCE"),
    3: .same(proto: "UNAVAILABILITY_REASON_DRONE_TOO_CLOSE_TO_GROUND"),
    4: .same(proto: "UNAVAILABILITY_REASON_DRONE_ABOVE_MAX_ALTITUDE"),
    5: .same(proto: "UNAVAILABILITY_REASON_DRONE_INSUFFICIENT_BATTERY"),
  ]
}

extension Arsdk_Pointnfly_Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Command"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    16: .standard(proto: "get_state"),
    17: .same(proto: "deactivate"),
    18: .same(proto: "execute"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 16: try {
        var v: Arsdk_Pointnfly_Command.GetState?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .getState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .getState(v)
        }
      }()
      case 17: try {
        var v: Arsdk_Pointnfly_Command.Deactivate?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .deactivate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .deactivate(v)
        }
      }()
      case 18: try {
        var v: Arsdk_Pointnfly_Command.Execute?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .execute(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .execute(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.id {
    case .getState?: try {
      guard case .getState(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .deactivate?: try {
      guard case .deactivate(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .execute?: try {
      guard case .execute(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_Command, rhs: Arsdk_Pointnfly_Command) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_Command.GetState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Pointnfly_Command.protoMessageName + ".GetState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "include_default_capabilities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.includeDefaultCapabilities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.includeDefaultCapabilities != false {
      try visitor.visitSingularBoolField(value: self.includeDefaultCapabilities, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_Command.GetState, rhs: Arsdk_Pointnfly_Command.GetState) -> Bool {
    if lhs.includeDefaultCapabilities != rhs.includeDefaultCapabilities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_Command.Deactivate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Pointnfly_Command.protoMessageName + ".Deactivate"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_Command.Deactivate, rhs: Arsdk_Pointnfly_Command.Deactivate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_Command.Execute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Pointnfly_Command.protoMessageName + ".Execute"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "point"),
    2: .same(proto: "fly"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Arsdk_Pointnfly_Point?
        var hadOneofValue = false
        if let current = self.directive {
          hadOneofValue = true
          if case .point(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.directive = .point(v)
        }
      }()
      case 2: try {
        var v: Arsdk_Pointnfly_Fly?
        var hadOneofValue = false
        if let current = self.directive {
          hadOneofValue = true
          if case .fly(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.directive = .fly(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.directive {
    case .point?: try {
      guard case .point(let v)? = self.directive else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .fly?: try {
      guard case .fly(let v)? = self.directive else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_Command.Execute, rhs: Arsdk_Pointnfly_Command.Execute) -> Bool {
    if lhs.directive != rhs.directive {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_Point: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Point"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gimbal_control_mode"),
    2: .same(proto: "latitude"),
    3: .same(proto: "longitude"),
    4: .same(proto: "altitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.gimbalControlMode) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.altitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gimbalControlMode != .locked {
      try visitor.visitSingularEnumField(value: self.gimbalControlMode, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 2)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 3)
    }
    if self.altitude != 0 {
      try visitor.visitSingularDoubleField(value: self.altitude, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_Point, rhs: Arsdk_Pointnfly_Point) -> Bool {
    if lhs.gimbalControlMode != rhs.gimbalControlMode {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.altitude != rhs.altitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_Fly: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Fly"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gimbal_control_mode"),
    2: .same(proto: "latitude"),
    3: .same(proto: "longitude"),
    4: .same(proto: "altitude"),
    5: .same(proto: "current"),
    6: .standard(proto: "to_target_before"),
    7: .standard(proto: "custom_before"),
    8: .standard(proto: "custom_during"),
    9: .standard(proto: "max_horizontal_speed"),
    10: .standard(proto: "max_vertical_speed"),
    11: .standard(proto: "max_yaw_rotation_speed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.gimbalControlMode) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.altitude) }()
      case 5: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.heading {
          hadOneofValue = true
          if case .current(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.heading = .current(v)
        }
      }()
      case 6: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.heading {
          hadOneofValue = true
          if case .toTargetBefore(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.heading = .toTargetBefore(v)
        }
      }()
      case 7: try {
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {
          if self.heading != nil {try decoder.handleConflictingOneOf()}
          self.heading = .customBefore(v)
        }
      }()
      case 8: try {
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {
          if self.heading != nil {try decoder.handleConflictingOneOf()}
          self.heading = .customDuring(v)
        }
      }()
      case 9: try { try decoder.decodeSingularDoubleField(value: &self.maxHorizontalSpeed) }()
      case 10: try { try decoder.decodeSingularDoubleField(value: &self.maxVerticalSpeed) }()
      case 11: try { try decoder.decodeSingularDoubleField(value: &self.maxYawRotationSpeed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.gimbalControlMode != .locked {
      try visitor.visitSingularEnumField(value: self.gimbalControlMode, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 2)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 3)
    }
    if self.altitude != 0 {
      try visitor.visitSingularDoubleField(value: self.altitude, fieldNumber: 4)
    }
    switch self.heading {
    case .current?: try {
      guard case .current(let v)? = self.heading else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .toTargetBefore?: try {
      guard case .toTargetBefore(let v)? = self.heading else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .customBefore?: try {
      guard case .customBefore(let v)? = self.heading else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    }()
    case .customDuring?: try {
      guard case .customDuring(let v)? = self.heading else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    if self.maxHorizontalSpeed != 0 {
      try visitor.visitSingularDoubleField(value: self.maxHorizontalSpeed, fieldNumber: 9)
    }
    if self.maxVerticalSpeed != 0 {
      try visitor.visitSingularDoubleField(value: self.maxVerticalSpeed, fieldNumber: 10)
    }
    if self.maxYawRotationSpeed != 0 {
      try visitor.visitSingularDoubleField(value: self.maxYawRotationSpeed, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_Fly, rhs: Arsdk_Pointnfly_Fly) -> Bool {
    if lhs.gimbalControlMode != rhs.gimbalControlMode {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.altitude != rhs.altitude {return false}
    if lhs.heading != rhs.heading {return false}
    if lhs.maxHorizontalSpeed != rhs.maxHorizontalSpeed {return false}
    if lhs.maxVerticalSpeed != rhs.maxVerticalSpeed {return false}
    if lhs.maxYawRotationSpeed != rhs.maxYawRotationSpeed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    16: .same(proto: "state"),
    17: .same(proto: "execution"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 16: try {
        var v: Arsdk_Pointnfly_Event.State?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .state(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .state(v)
        }
      }()
      case 17: try {
        var v: Arsdk_Pointnfly_ExecutionStatus?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.id != nil {try decoder.handleConflictingOneOf()}
          self.id = .execution(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.id {
    case .state?: try {
      guard case .state(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .execution?: try {
      guard case .execution(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_Event, rhs: Arsdk_Pointnfly_Event) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_Event.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Pointnfly_Event.protoMessageName + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "unavailable"),
    3: .same(proto: "idle"),
    4: .same(proto: "active"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try {
        var v: Arsdk_Pointnfly_State.Unavailable?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .unavailable(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .unavailable(v)
        }
      }()
      case 3: try {
        var v: Arsdk_Pointnfly_State.Idle?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .idle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .idle(v)
        }
      }()
      case 4: try {
        var v: Arsdk_Pointnfly_State.Active?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .active(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .active(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.state {
    case .unavailable?: try {
      guard case .unavailable(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .idle?: try {
      guard case .idle(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .active?: try {
      guard case .active(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_Event.State, rhs: Arsdk_Pointnfly_Event.State) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_Event.Execution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Pointnfly_Event.protoMessageName + ".Execution"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_Event.Execution, rhs: Arsdk_Pointnfly_Event.Execution) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".State"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_State, rhs: Arsdk_Pointnfly_State) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_State.Unavailable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Pointnfly_State.protoMessageName + ".Unavailable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reasons"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.reasons) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reasons.isEmpty {
      try visitor.visitPackedEnumField(value: self.reasons, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_State.Unavailable, rhs: Arsdk_Pointnfly_State.Unavailable) -> Bool {
    if lhs.reasons != rhs.reasons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_State.Idle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Pointnfly_State.protoMessageName + ".Idle"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_State.Idle, rhs: Arsdk_Pointnfly_State.Idle) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Pointnfly_State.Active: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Pointnfly_State.protoMessageName + ".Active"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "point"),
    2: .same(proto: "fly"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Arsdk_Pointnfly_Point?
        var hadOneofValue = false
        if let current = self.currentDirective {
          hadOneofValue = true
          if case .point(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.currentDirective = .point(v)
        }
      }()
      case 2: try {
        var v: Arsdk_Pointnfly_Fly?
        var hadOneofValue = false
        if let current = self.currentDirective {
          hadOneofValue = true
          if case .fly(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.currentDirective = .fly(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.currentDirective {
    case .point?: try {
      guard case .point(let v)? = self.currentDirective else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .fly?: try {
      guard case .fly(let v)? = self.currentDirective else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Pointnfly_State.Active, rhs: Arsdk_Pointnfly_State.Active) -> Bool {
    if lhs.currentDirective != rhs.currentDirective {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
